product creator 

<?php
/**
 * Create or update WooCommerce products from the database.
 */

// Include shared functions
require_once(plugin_dir_path(__FILE__) . 'shared-functions.php');

if (!function_exists('create_woocommerce_products_from_db')) {
    function create_woocommerce_products_from_db() {
        global $wpdb;

        // Check if WooCommerce is active
        if (!class_exists('WooCommerce')) {
            echo "<p>WooCommerce is not active. Please activate WooCommerce to use this feature.</p>";
            return;
        }

        // Fetch data from your custom table
        $results = $wpdb->get_results("SELECT * FROM wp_movera");

        if (empty($results)) {
            echo "<p>No products found in the database.</p>";
            return;
        }

        foreach ($results as $row) {
            // Check if product already exists by mainnumber (unique identifier)
            $existing_product_id = $wpdb->get_var(
                $wpdb->prepare(
                    "SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_mainnumber' AND meta_value = %s",
                    $row->mainnumber
                )
            );

            // Decode HTML entities and preserve safe HTML tags in the description
            $cleaned_description = wp_kses_post(html_entity_decode($row->description_long));

            if ($existing_product_id) {
                // Update existing product
                $product_data = [
                    'ID'           => $existing_product_id,
                    'post_title'   => $row->name,
                    'post_content' => $cleaned_description,
                    'post_status'  => 'publish',
                ];

                // Update the product
                $product_id = wp_update_post($product_data);

                if ($product_id) {
                    // Update product metadata
                    update_post_meta($product_id, '_regular_price', $row->VK);
                    update_post_meta($product_id, '_price', $row->VK);
                    update_post_meta($product_id, '_stock', $row->lagerbestand);
                    update_post_meta($product_id, '_sku', $row->suppliernumber);
                    update_post_meta($product_id, '_mainnumber', $row->mainnumber);
                    update_post_meta($product_id, '_stock_info', "Noch " . $row->lagerbestand . " Artikel ONLINE vorrätig");

                    // Add delivery time
                    if (!empty($row->lieferzeit)) {
                        update_post_meta($product_id, '_lieferzeit', $row->lieferzeit);
                        error_log("Delivery time updated for product '{$row->name}' (ID: {$product_id}): {$row->lieferzeit}");
                    }

                    // Add tax information
                    if (!empty($row->tax)) {
                        $tax_message = sprintf(
                            'Enthält %d%% MwSt. zzgl. <a href="/versand-lieferung/" style="color: blue; text-decoration: none;">Versand</a>',
                            $row->tax
                        );
                        update_post_meta($product_id, '_tax_info', $tax_message);
                    }

                    // Add property values
                    if (!empty($row->propertyValueName)) {
                        update_post_meta($product_id, '_propertyValueName', $row->propertyValueName);
                        error_log("Property Value updated for product '{$row->name}' (ID: {$product_id}): {$row->propertyValueName}");
                    }

                    // Add additional fields for "Zusätzliche Informationen"
                    if (!empty($row->VariantDescription)) {
                        update_post_meta($product_id, '_VariantDescription', $row->VariantDescription);
                    }
                    if (!empty($row->weight)) {
                        update_post_meta($product_id, '_weight', $row->weight);
                    }
                    if (!empty($row->configuratorOptions)) {
                        update_post_meta($product_id, '_configuratorOptions', $row->configuratorOptions);
                    }
                    if (!empty($row->propertyValueName_5)) {
                        update_post_meta($product_id, '_propertyValueName_5', $row->propertyValueName_5);
                    }
                    if (!empty($row->ghsSignalWord)) {
                        update_post_meta($product_id, '_ghsSignalWord', $row->ghsSignalWord);
                    }
                    if (!empty($row->EnergieLabel)) {
                        update_post_meta($product_id, '_EnergieLabel', $row->EnergieLabel);
                    }
                    if (!empty($row->energyLabelColour)) {
                        update_post_meta($product_id, '_energyLabelColour', $row->energyLabelColour);
                    }
                    if (!empty($row->accessory)) {
                        update_post_meta($product_id, '_accessory', $row->accessory);
                    }

                    // Download and attach images
                    if (!empty($row->imageURL)) {
                        download_and_attach_images($row->imageURL, $product_id);
                        error_log("Images processed for product '{$row->name}' (ID: {$product_id}).");
                    }
                }
            } else {
                // Create new product
                $product_data = [
                    'post_title'   => $row->name,
                    'post_content' => $cleaned_description,
                    'post_status'  => 'publish',
                    'post_type'    => 'product',
                ];

                // Insert the product
                $product_id = wp_insert_post($product_data);

                if ($product_id) {
                    // Set product metadata
                    update_post_meta($product_id, '_regular_price', $row->VK);
                    update_post_meta($product_id, '_price', $row->VK);
                    update_post_meta($product_id, '_stock', $row->lagerbestand);
                    update_post_meta($product_id, '_sku', $row->suppliernumber);
                    update_post_meta($product_id, '_mainnumber', $row->mainnumber);
                    update_post_meta($product_id, '_stock_info', "Noch " . $row->lagerbestand . " Artikel ONLINE vorrätig");

                    // Add delivery time
                    if (!empty($row->lieferzeit)) {
                        update_post_meta($product_id, '_lieferzeit', $row->lieferzeit);
                    }

                    // Add tax information
                    if (!empty($row->tax)) {
                        $tax_message = sprintf(
                            'Enthält %d%% MwSt. zzgl. <a href="/versand-lieferung/" style="color: blue; text-decoration: none;">Versand</a>',
                            $row->tax
                        );
                        update_post_meta($product_id, '_tax_info', $tax_message);
                    }

                    // Add property values
                    if (!empty($row->propertyValueName)) {
                        update_post_meta($product_id, '_propertyValueName', $row->propertyValueName);
                        error_log("Property Value updated for product '{$row->name}' (ID: {$product_id}): {$row->propertyValueName}");
                    }

                    // Add additional fields for "Zusätzliche Informationen"
                    if (!empty($row->VariantDescription)) {
                        update_post_meta($product_id, '_VariantDescription', $row->VariantDescription);
                    }
                    if (!empty($row->weight)) {
                        update_post_meta($product_id, '_weight', $row->weight);
                    }
                    if (!empty($row->configuratorOptions)) {
                        update_post_meta($product_id, '_configuratorOptions', $row->configuratorOptions);
                    }
                    if (!empty($row->propertyValueName_5)) {
                        update_post_meta($product_id, '_propertyValueName_5', $row->propertyValueName_5);
                    }
                    if (!empty($row->ghsSignalWord)) {
                        update_post_meta($product_id, '_ghsSignalWord', $row->ghsSignalWord);
                    }
                    if (!empty($row->EnergieLabel)) {
                        update_post_meta($product_id, '_EnergieLabel', $row->EnergieLabel);
                    }
                    if (!empty($row->energyLabelColour)) {
                        update_post_meta($product_id, '_energyLabelColour', $row->energyLabelColour);
                    }
                    if (!empty($row->accessory)) {
                        update_post_meta($product_id, '_accessory', $row->accessory);
                    }

                    // Download and attach images
                    if (!empty($row->imageURL)) {
                        download_and_attach_images($row->imageURL, $product_id);
                    }
                }
            }
        }
    }
}
?>





share with issues:<?php
/**
 * Shared Functions for CSV Importer and Product Creator
 */

if (!function_exists('download_and_attach_images')) {
    function download_and_attach_images($image_urls, $post_id) {
        global $wpdb;
        $image_urls_array = explode('|', $image_urls);
        $gallery_ids = [];
        $first_image_set = false;

        foreach ($image_urls_array as $image_url) {
            $image_url = trim($image_url);
            if (empty($image_url)) {
                continue;
            }

            $imageHash = generate_image_hash($image_url);
            $existingAttachmentId = $wpdb->get_var(
                $wpdb->prepare(
                    "SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_image_hash' AND meta_value = %s",
                    $imageHash
                )
            );

            if ($existingAttachmentId) {
                $attachment_id = $existingAttachmentId;
                error_log("Using existing image for product {$post_id}");
            } else {
                $attachment_id = upload_image_to_media_library($image_url, $post_id);
                if ($attachment_id) {
                    update_post_meta($attachment_id, '_image_hash', $imageHash);
                }
            }

            if ($attachment_id) {
                if (!$first_image_set) {
                    set_post_thumbnail($post_id, $attachment_id);
                    $first_image_set = true;
                } else {
                    $gallery_ids[] = $attachment_id;
                }
            }
        }

        if (!empty($gallery_ids)) {
            update_post_meta($post_id, '_product_image_gallery', implode(',', $gallery_ids));
        }
    }
}

if (!function_exists('generate_image_hash')) {
    function generate_image_hash($image_url) {
        // Hashing the URL may not be ideal for all cases, consider hashing file content for more accuracy
        $parsed_url = parse_url($image_url);
        $path = isset($parsed_url['path']) ? $parsed_url['path'] : '';
        return md5($path);
    }
}

if (!function_exists('upload_image_to_media_library')) {
    function upload_image_to_media_library($image_url, $post_id) {
        require_once(ABSPATH . 'wp-admin/includes/media.php');
        require_once(ABSPATH . 'wp-admin/includes/file.php');
        require_once(ABSPATH . 'wp-admin/includes/image.php');

        $tmp = download_url($image_url);
        if (is_wp_error($tmp)) {
            error_log("Failed to download image: {$image_url}. Error: " . $tmp->get_error_message());
            return false;
        }

        $file_array = [
            'name'     => basename($image_url),
            'tmp_name' => $tmp,
        ];

        $attachment_id = media_handle_sideload($file_array, $post_id);
        @unlink($tmp); // Clean up the temporary file

        if (is_wp_error($attachment_id)) {
            error_log("Failed to attach image: {$image_url}. Error: " . $attachment_id->get_error_message());
            return false;
        }

        return $attachment_id;
    }
}

?>


product with issues: 
<?php
/**
 * Create or update WooCommerce products from the database.
 */

// Include shared functions
require_once(plugin_dir_path(__FILE__) . 'shared-functions.php');

if (!function_exists('create_woocommerce_products_from_db')) {
    function create_woocommerce_products_from_db() {
        global $wpdb;

        // Check if WooCommerce is active
        if (!class_exists('WooCommerce')) {
            echo "<p>WooCommerce is not active. Please activate WooCommerce to use this feature.</p>";
            return;
        }

        // Fetch data from your custom table
        $results = $wpdb->get_results("SELECT * FROM wp_movera");

        if (empty($results)) {
            echo "<p>No products found in the database.</p>";
            return;
        }

        foreach ($results as $row) {
            // Check if product already exists by mainnumber (unique identifier)
            $existing_product_id = $wpdb->get_var(
                $wpdb->prepare(
                    "SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_mainnumber' AND meta_value = %s",
                    $row->mainnumber
                )
            );

            // Decode HTML entities and preserve safe HTML tags in the description
            $cleaned_description = wp_kses_post(html_entity_decode($row->description_long));

            if ($existing_product_id) {
                // Update existing product
                $product_data = [
                    'ID'           => $existing_product_id,
                    'post_title'   => $row->name,
                    'post_content' => $cleaned_description,
                    'post_status'  => 'publish',
                ];

                // Update the product
                $product_id = wp_update_post($product_data);

                if ($product_id) {
                    // Update product metadata
                    update_post_meta($product_id, '_regular_price', $row->VK);
                    update_post_meta($product_id, '_price', $row->VK);
                    update_post_meta($product_id, '_stock', $row->lagerbestand);
                    update_post_meta($product_id, '_sku', $row->suppliernumber);
                    update_post_meta($product_id, '_mainnumber', $row->mainnumber);
                    update_post_meta($product_id, '_stock_info', "Noch " . $row->lagerbestand . " Artikel ONLINE vorrätig");

                    // Add delivery time
                    if (!empty($row->lieferzeit)) {
                        update_post_meta($product_id, '_lieferzeit', $row->lieferzeit);
                        error_log("Delivery time updated for product '{$row->name}' (ID: {$product_id}): {$row->lieferzeit}");
                    }

                    // Add tax information
                    if (!empty($row->tax)) {
                        $tax_message = sprintf(
                            'Enthält %d%% MwSt. zzgl. <a href="/versand-lieferung/" style="color: blue; text-decoration: none;">Versand</a>',
                            $row->tax
                        );
                        update_post_meta($product_id, '_tax_info', $tax_message);
                    }

                    // Add property values
                    if (!empty($row->propertyValueName)) {
                        update_post_meta($product_id, '_propertyValueName', $row->propertyValueName);
                        error_log("Property Value updated for product '{$row->name}' (ID: {$product_id}): {$row->propertyValueName}");
                    }

                    // Add additional fields for "Zusätzliche Informationen"
                    if (!empty($row->VariantDescription)) {
                        update_post_meta($product_id, '_VariantDescription', $row->VariantDescription);
                    }
                    if (!empty($row->weight)) {
                        update_post_meta($product_id, '_weight', $row->weight);
                    }
                    if (!empty($row->configuratorOptions)) {
                        update_post_meta($product_id, '_configuratorOptions', $row->configuratorOptions);
                    }
                    if (!empty($row->propertyValueName_5)) {
                        update_post_meta($product_id, '_propertyValueName_5', $row->propertyValueName_5);
                    }
                    if (!empty($row->ghsSignalWord)) {
                        update_post_meta($product_id, '_ghsSignalWord', $row->ghsSignalWord);
                    }
                    if (!empty($row->EnergieLabel)) {
                        update_post_meta($product_id, '_EnergieLabel', $row->EnergieLabel);
                    }
                    if (!empty($row->energyLabelColour)) {
                        update_post_meta($product_id, '_energyLabelColour', $row->energyLabelColour);
                    }
                    if (!empty($row->accessory)) {
                        update_post_meta($product_id, '_accessory', $row->accessory);
                    }

                    // Download and attach images
                    if (!empty($row->imageURL)) {
                        download_and_attach_images($row->imageURL, $product_id);
                        error_log("Images processed for product '{$row->name}' (ID: {$product_id}).");
                    }
                }
            } else {
                // Create new product
                $product_data = [
                    'post_title'   => $row->name,
                    'post_content' => $cleaned_description,
                    'post_status'  => 'publish',
                    'post_type'    => 'product',
                ];

                // Insert the product
                $product_id = wp_insert_post($product_data);

                if ($product_id) {
                    // Set product metadata
                    update_post_meta($product_id, '_regular_price', $row->VK);
                    update_post_meta($product_id, '_price', $row->VK);
                    update_post_meta($product_id, '_stock', $row->lagerbestand);
                    update_post_meta($product_id, '_sku', $row->suppliernumber);
                    update_post_meta($product_id, '_mainnumber', $row->mainnumber);
                    update_post_meta($product_id, '_stock_info', "Noch " . $row->lagerbestand . " Artikel ONLINE vorrätig");

                    // Add delivery time
                    if (!empty($row->lieferzeit)) {
                        update_post_meta($product_id, '_lieferzeit', $row->lieferzeit);
                    }

                    // Add tax information
                    if (!empty($row->tax)) {
                        $tax_message = sprintf(
                            'Enthält %d%% MwSt. zzgl. <a href="/versand-lieferung/" style="color: blue; text-decoration: none;">Versand</a>',
                            $row->tax
                        );
                        update_post_meta($product_id, '_tax_info', $tax_message);
                    }

                    // Add property values
                    if (!empty($row->propertyValueName)) {
                        update_post_meta($product_id, '_propertyValueName', $row->propertyValueName);
                        error_log("Property Value updated for product '{$row->name}' (ID: {$product_id}): {$row->propertyValueName}");
                    }

                    // Add additional fields for "Zusätzliche Informationen"
                    if (!empty($row->VariantDescription)) {
                        update_post_meta($product_id, '_VariantDescription', $row->VariantDescription);
                    }
                    if (!empty($row->weight)) {
                        update_post_meta($product_id, '_weight', $row->weight);
                    }
                    if (!empty($row->configuratorOptions)) {
                        update_post_meta($product_id, '_configuratorOptions', $row->configuratorOptions);
                    }
                    if (!empty($row->propertyValueName_5)) {
                        update_post_meta($product_id, '_propertyValueName_5', $row->propertyValueName_5);
                    }
                    if (!empty($row->ghsSignalWord)) {
                        update_post_meta($product_id, '_ghsSignalWord', $row->ghsSignalWord);
                    }
                    if (!empty($row->EnergieLabel)) {
                        update_post_meta($product_id, '_EnergieLabel', $row->EnergieLabel);
                    }
                    if (!empty($row->energyLabelColour)) {
                        update_post_meta($product_id, '_energyLabelColour', $row->energyLabelColour);
                    }
                    if (!empty($row->accessory)) {
                        update_post_meta($product_id, '_accessory', $row->accessory);
                    }

                    // Download and attach images
                    if (!empty($row->imageURL)) {
                        download_and_attach_images($row->imageURL, $product_id);
                    }
                }
            }
        }
    }
}
?>

main with issues;
<?php
/*
Plugin Name: CSV Importer to wp_movera
Description: Imports CSV files into wp_movera table and creates WooCommerce products.
Version: 1.0
Author: Hamy Vosugh
Text Domain: movera-importer
*/

ini_set('memory_limit', '512M'); // Increase memory limit to 512MB

// Hook for adding admin menus
add_action('admin_menu', 'csv_importer_menu');
add_action('wp_ajax_create_products', 'prefix_handle_create_products');
add_action('wp_ajax_nopriv_create_products', 'prefix_handle_create_products');
add_action('wp_ajax_cancel_creation', 'cancel_product_creation');
add_action('init', 'load_plugin_textdomain_setup');

function load_plugin_textdomain_setup() {
    load_plugin_textdomain('movera-importer', false, dirname(plugin_basename(__FILE__)) . '/languages/');
}

function prefix_handle_create_products() {
    require_once(plugin_dir_path(__FILE__) . 'product-creator-functions.php');
    create_woocommerce_products_from_db();
}

function cancel_product_creation() {
    set_transient('cancel_product_creation', true, 10 * MINUTE_IN_SECONDS);
    wp_send_json_success(array('message' => 'Cancellation requested.'));
}

function csv_importer_menu() {
    add_menu_page('CSV Importer', 'CSV Importer', 'manage_options', 'csv_importer', 'csv_importer_page', 'dashicons-upload', 26);
    add_submenu_page('csv_importer', 'Import CSV', 'Import CSV', 'manage_options', 'csv_importer', 'csv_importer_page');
    add_submenu_page('csv_importer', 'Create Products', 'Create Products', 'manage_options', 'create_products', 'csv_importer_create_products_page');
}

function csv_importer_page() {
    ?>
    <h2>Import CSV to wp_movera</h2>
    <form method="post" action="" enctype="multipart/form-data">
        <input type="file" name="file" id="file" accept=".csv">
        <input type="submit" name="import" value="Import">
    </form>
    <?php
    if (isset($_POST['import'])) {
        require_once(plugin_dir_path(__FILE__) . 'csv-importer-functions.php');
        handle_csv_import();
    }
}

function csv_importer_create_products_page() {
    ?>
    <h2>Create Products from wp_movera</h2>
    <form method="post" action="" id="createProductsForm">
        <input type="submit" name="create_products" value="Create Products">
    </form>
    <button id="cancelCreation" style="display:none; color:red;">Cancel Creation</button>
    
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        $('#createProductsForm').on('submit', function(e) {
            e.preventDefault();
            $(this).find('input[type="submit"]').prop('disabled', true);
            $('#cancelCreation').show();

            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'create_products'
                },
                success: function(response) {
                    alert('Product creation started!');
                    $('#cancelCreation').hide();
                    $('#createProductsForm').find('input[type="submit"]').prop('disabled', false);
                }
            });
        });

        $('#cancelCreation').on('click', function() {
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'cancel_creation'
                },
                success: function(response) {
                    alert('Product creation cancellation requested.');
                    $('#cancelCreation').hide();
                    $('#createProductsForm').find('input[type="submit"]').prop('disabled', false);
                }
            });
        });
    });
    </script>
    <?php
    if (isset($_POST['create_products'])) {
        create_woocommerce_products_from_db();
    }
}
?>
